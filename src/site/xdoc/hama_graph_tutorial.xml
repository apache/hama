<?xml version="1.0" encoding="iso-8859-1"?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<document xmlns="http://maven.apache.org/XDOC/2.0"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  <properties></properties>
  <title>Graph Tutorial</title>
  <body>
    <section name="Hama Graph Tutorial"></section>
    <p>This document describes the Graph computing framework and serves as a tutorial.</p>
    <subsection name="Overview"></subsection>
    <p>Hama includes the Graph package for vertex-centric graph computations.
    Hama's Graph package allows you to program Google's Pregel style applications with simple programming interface.</p>

    <subsection name="Vertex API"></subsection>    

    <p>Writing a Hama graph application involves subclassing the predefined Vertex class. Its template arguments define three value types, associated with vertices, edges, and messages.</p>
    <pre class="green">
  public abstract class Vertex&lt;ID_TYPE extends Writable, MSG_TYPE extends Writable, EDGE_VALUE_TYPE extends Writable&gt;
      implements VertexInterface&lt;ID_TYPE, MSG_TYPE, EDGE_VALUE_TYPE&gt; {

    public void compute(Iterator&lt;MSGTYPE&gt; messages) throws IOException;
    ..

  }</pre>    

   <p>The user overrides the Compute() method, which will be executed at each active vertex in every superstep. Predefined Vertex methods allow Compute() to query information about the current vertex and its edges, and to send messages to other vertices. Compute() can inspect the value associated with its vertex via GetValue().</p>

   <subsection name="Example: PageRankVertex"></subsection>
   <p>To solve the Page Rank problem using Hama Graph, you can extends the Vertex class to create a PageRankVertex class.
In this example, the algorithm described Google's Pregel paper was used. The value of a vertex represents the tentative page rank of the vertex. The graph is intialized with each vertex value equal to 1/numOfVertices. In each of the first 30 supersteps, each vertex sends its tentative page rank along all of its outgoing edges.
<br/><br/>
From Superstep 1 to 30, each vertex sums up the values arriving on all its messages and sets its tentative page rank to (1 - 0.85) / numOfVertices + (0.85 * sum).
   </p>

    <pre class="green">
  public static class PageRankVertex extends
      Vertex&lt;Text, NullWritable, DoubleWritable&gt; {

    static double DAMPING_FACTOR = 0.85;
    static double MAXIMUM_CONVERGENCE_ERROR = 0.001;

    @Override
    public void compute(Iterator&lt;DoubleWritable&gt; messages) throws IOException {
      // initialize this vertex to 1 / count of global vertices in this graph
      if (this.getSuperstepCount() == 0) {
        this.setValue(new DoubleWritable(1.0 / this.getNumVertices()));
      }

      // in the first superstep, there are no messages to check
      if (this.getSuperstepCount() &gt;= 1) {
        double sum = 0;
        while (messages.hasNext()) {
          DoubleWritable msg = messages.next();
          sum += msg.get();
        }
        double alpha = (1.0d - DAMPING_FACTOR) / this.getNumVertices();
        this.setValue(new DoubleWritable(alpha + (DAMPING_FACTOR * sum)));
      }

      // if we have not reached our global error yet, then proceed.
      DoubleWritable globalError = getLastAggregatedValue(0);
      if (globalError != null &amp;&amp; this.getSuperstepCount() &gt; 2
          &amp;&amp; MAXIMUM_CONVERGENCE_ERROR &gt; globalError.get()) {
        return;
      }
      
      // in each superstep we are going to send a new rank to our neighbours
      sendMessageToNeighbors(new DoubleWritable(this.getValue().get() / numEdges));
    }
  }</pre>

  </body>
</document>
